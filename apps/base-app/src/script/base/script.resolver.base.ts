/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScriptArgs } from "./CreateScriptArgs";
import { UpdateScriptArgs } from "./UpdateScriptArgs";
import { DeleteScriptArgs } from "./DeleteScriptArgs";
import { ScriptFindManyArgs } from "./ScriptFindManyArgs";
import { ScriptFindUniqueArgs } from "./ScriptFindUniqueArgs";
import { Script } from "./Script";
import { ScriptService } from "../script.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Script)
export class ScriptResolverBase {
  constructor(
    protected readonly service: ScriptService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "read",
    possession: "any",
  })
  async _scriptsMeta(
    @graphql.Args() args: ScriptFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Script])
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "read",
    possession: "any",
  })
  async scripts(@graphql.Args() args: ScriptFindManyArgs): Promise<Script[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Script, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "read",
    possession: "own",
  })
  async script(
    @graphql.Args() args: ScriptFindUniqueArgs
  ): Promise<Script | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Script)
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "create",
    possession: "any",
  })
  async createScript(@graphql.Args() args: CreateScriptArgs): Promise<Script> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Script)
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "update",
    possession: "any",
  })
  async updateScript(
    @graphql.Args() args: UpdateScriptArgs
  ): Promise<Script | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Script)
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "delete",
    possession: "any",
  })
  async deleteScript(
    @graphql.Args() args: DeleteScriptArgs
  ): Promise<Script | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
