/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAnalyseArgs } from "./CreateAnalyseArgs";
import { UpdateAnalyseArgs } from "./UpdateAnalyseArgs";
import { DeleteAnalyseArgs } from "./DeleteAnalyseArgs";
import { AnalyseFindManyArgs } from "./AnalyseFindManyArgs";
import { AnalyseFindUniqueArgs } from "./AnalyseFindUniqueArgs";
import { Analyse } from "./Analyse";
import { Consultant } from "../../consultant/base/Consultant";
import { AnalyseService } from "../analyse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Analyse)
export class AnalyseResolverBase {
  constructor(
    protected readonly service: AnalyseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "read",
    possession: "any",
  })
  async _analysesMeta(
    @graphql.Args() args: AnalyseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Analyse])
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "read",
    possession: "any",
  })
  async analyses(
    @graphql.Args() args: AnalyseFindManyArgs
  ): Promise<Analyse[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Analyse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "read",
    possession: "own",
  })
  async analyse(
    @graphql.Args() args: AnalyseFindUniqueArgs
  ): Promise<Analyse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analyse)
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "create",
    possession: "any",
  })
  async createAnalyse(
    @graphql.Args() args: CreateAnalyseArgs
  ): Promise<Analyse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        consultant: args.data.consultant
          ? {
              connect: args.data.consultant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analyse)
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "update",
    possession: "any",
  })
  async updateAnalyse(
    @graphql.Args() args: UpdateAnalyseArgs
  ): Promise<Analyse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          consultant: args.data.consultant
            ? {
                connect: args.data.consultant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Analyse)
  @nestAccessControl.UseRoles({
    resource: "Analyse",
    action: "delete",
    possession: "any",
  })
  async deleteAnalyse(
    @graphql.Args() args: DeleteAnalyseArgs
  ): Promise<Analyse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Consultant, {
    nullable: true,
    name: "consultant",
  })
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "read",
    possession: "any",
  })
  async resolveFieldConsultant(
    @graphql.Parent() parent: Analyse
  ): Promise<Consultant | null> {
    const result = await this.service.getConsultant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
